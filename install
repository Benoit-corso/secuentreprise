#! /usr/bin/env bash

declare -A packages
declare -A host_ip
##############################################################################
#_____  _______      _     ____           ____
#‾‾‾‾‾##‾‾‾‾‾‾####$'‾‾‾'$###,‾‾';#######:'‾‾,# Copyright Benoit CORSO - 2024
#%   %###%   %###    ,    ###%,  ;#####:  ,%## benoit.corso@laplateforme.io
#%     %#%   %##    %#%    ####%,  ;#:  ,%#### Edité le: 2024-09-04 23:12
#%   %   %   %##    $@$    ######%     %######
#%   %#%     %##    %#%    ####%'  ;#:  '%#### Projet: Secu Entreprise
#%   %###%   %###    '    ###%'  ;#####:  '%## Fichier: install
#______##_____####$,___,$###'__,;#######:,__'# 
#‾‾‾‾‾‾  ‾‾‾‾‾‾      ‾     ‾‾‾‾           ‾‾‾‾
###############################################################################
#
# Ce script permet d'installer l'ensemble du projet secu entreprise
# Vous pouvez le configurer en entrant les variables d'environnement ci-dessous
# 	de meme pour les versions des paquets.
#
# Le script a pour but d'automatiser l'installation avec des parametres
# 	qui n'expose pas les données collectés par les differents services.
#
# Configuration:
ARCH=${ARCH:=arm64}
OS=${OS:=linux}
DISTRO=${DISTRO:=debian}
WINDOWS_ARCH=${WINDOWS_ARCHamd64}
MACOS_ARCH=${MACOS_ARCH:=arm64}
PKG_MANAGER=${PKG_MANAGER:=apt}

packages=(
	["zabbix"]="${ZABBIX_VERSION:=7.0}"						#LTS
	["prometheus"]="${PROMETHEUS_VERSION:=2.54.1}"			#2024-08-27
	["node_exporter"]="${NODEEXP_VERSION:=1.8.2}"			#2024-06-19
	["windows_exporter"]="${WINDOWSEXP_VERSION:=0.28.1}"	#2024-08-31
	["grafana"]="${GRAFANA_VERSION:=}"						#
	["elasticsearch"]="${ELASTIC_VERSION:=}"				#
	["kibana"]="${KIBANA_VERSION:=}"						#
	["metricbeat"]="${METRIC_VERSION:=}"					#
	["logstash"]="${LOGSTASH_VERSION:=}"					#
	["thehive"]="${THEHIVE_VERSION:=}"						#
	["mariadb"]="${MARIADB_VERSION:=}"						#
	["nginx"]="${NGINX_VERSION:=}"							#
	["MISP"]="${MISP_VERSION:=}"							#
)

prereq=(
	["zabbix"]="${ZABBIX_VERSION:=7.0}"						#LTS
	["prometheus"]="${PROMETHEUS_VERSION:=2.54.1}"			#2024-08-27
	["node_exporter"]="${NODEEXP_VERSION:=1.8.2}"			#2024-06-19
	["windows_exporter"]="${WINDOWSEXP_VERSION:=0.28.1}"	#2024-08-31
	["grafana"]="${GRAFANA_VERSION:=}"						#
	["elasticsearch"]="apt-transport-https"					#
	["kibana"]="${KIBANA_VERSION:=}"						#
	["metricbeat"]="${METRIC_VERSION:=}"					#
	["logstash"]="${LOGSTASH_VERSION:=}"					#
	["thehive"]="wget gnupg apt-transport-https git ca-certificates ca-certificates-java curl software-properties-common python3-pip lsb-release"						#
	["mariadb"]="${MARIADB_VERSION:=}"						#
	["nginx"]="${NGINX_VERSION:=}"							#
	["MISP"]="${MISP_VERSION:=}"							#
)

# wget -qO - $repo_key | sudo gpg --dearmor -o /usr/share/keyrings/${package}-keyring.gpg
repo_key=(
	# corretto = JAVA openJDK by Amazon
	["corretto"]="https://apt.corretto.aws/corretto.key"
	["elasticsearch"]="https://artifacts.elastic.co/GPG-KEY-elasticsearch"
	["cassandra"]="https://downloads.apache.org/cassandra/KEYS"
	["thehive"]="https://raw.githubusercontent.com/StrangeBeeCorp/Security/main/PGP%20keys/packages.key"
)
# echo "$repo_address" | sudo tee /etc/apt/sources.list.d/elastic-${version}.list 
repo_address=(
	["elasticsearch"]="deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/7.x/apt stable main"
	["thehive"]="deb [arch=all signed-by=/usr/share/keyrings/thehive-keyring.gpg] https://deb.strangebee.com thehive-5.3 main"
)

# Fin de la configuration
##############################################################################
# TODO:
#
unset VERSION
unset version
if [[ "$(uname -o)" =~ "[Ll]inux"* ]]; then
	if ! [ -e "$(which ip)" ]; then
		echo "ip utility is required to run this script."
		exit 1
	fi
	ip="ip"
elif [[ "$(uname)" =~ "Darwin" ]] ; then
	if ! [ -e "$(which ifconfig)" ]; then
		echo "ifconfig utility is required to run this script."
		exit 1
	fi
	ip="ifconfig"
else
	echo "your OS isn't supported currently. exiting."
	exit 1
fi
if ! [ -e "$(which dialog)" ]; then
	echo "Should install dialog to use this script.\n\t wanna do it now ? [Yy/Nn] ";
	read -n1 dialog_install;
	if [[ "$install_dialog" = "[yY]" ]] ; then
		"${PKG_MANAGER}" install -y dialog
		if [ "$?" = "0" ]; then
			echo "${PKG_MANAGER} encountered an error.";
			exit 1
		fi
	fi
fi
if [ "${ip}" = "ip" ]; then
	host_ip=($(ip a | grep inet | awk '{print $2}' | tr "\n" " "))
elif [ "${ip}" = "ifconfig" ]; then
	host_ip=($(ifconfig a | grep inet | awk '{print $2}' | tr "\n" " "))
fi
gh_prometheus="https://github.com/prometheus/"
gh_prometheus_community="https://github.com/prometheus-community/"
echo "${ip}"
echo "${host_ip}"
get_installer() {
	local version=$1
	local package=$2
	installers=(
		"https://repo.zabbix.com/"
		"${gh_prometheus}"
	#	"${gh_prometheus}"
	#	"${gh_prometheus_community}"
		""
	)
}

install_deb() {
	local install=$2
	local package=$1
	dpkg -i "${install}"
	if [ "$?" = "0" ]; then
		echo "${package} installation complete."
	fi
	rm "${install}"
}

install_tar() {
	local install=$2
	local package=$1
	local binary=${3:=$1}
	tar xvf "${install}" -C "/tmp/${package}"
	if [ "$?" = "0" ]; then
		echo "${package} installation complete."
	fi
}

make_unit() {
	service_name=$1
	service_user=$2
	service_group=$3
	description=$4
	binary=$5
	cat <<EOF >"/etc/systemd/system/$1.service"
[Unit]
Description=Prometheus Monitoring
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
     --config.file /etc/prometheus/prometheus.yml \
     --storage.tsdb.path /var/lib/prometheus/ \
     --web.console.templates=/etc/prometheus/consoles \
     --web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target
EOF

}

print_help() {
	echo ""
}

#for arg in "$@"; do
#	case $arg in
#		"--help")
#		"-h"
#		print_help;;
#	*) echo >&2 "Invalid option: $@"; exit 1;;
#	esac
#done


#i=((0))
#for package in "${packages[@]}"; do
#	echo "Installing ${package} v${version[$i]}"
#	((i++))
#done

#select ip in ${host_ip[@]}; do
#	echo $ip
#done
